{
    "collab_server" : "",
    "contents" : "%\\VignetteIndexEntry{pwOmics}\n\\documentclass[a4paper]{article}\n\n\\usepackage[T1]{fontenc}\n\\usepackage[utf8]{inputenc}\n\\usepackage[english]{babel}\n\n\\usepackage{graphicx}\n\\usepackage{enumitem}\n\\usepackage{epstopdf}\n\\usepackage{csquotes}\n%\\usepackage[sort, numbers]{natbib}\n\\usepackage[backend=biber,bibencoding=utf8,style=authoryear,sorting=none]{biblatex}\n\\usepackage{subcaption}\n\\usepackage{hyperref}\n\\usepackage[noae]{Sweave}\n\n\\addbibresource{pwOmics_vignette.bib}\n\\setlength{\\parindent}{0pt}\n\n\\title{pwOmics - Pathway-based integration of time-series omics data using public database knowledge}\n\\author{Astrid Wachter\\\\\nMedical Statistics, University Medical Center G\\\"ottingen, Germany}\n\n\n\\begin{document}\n\\SweaveOpts{concordance=TRUE}\n%\\bibliographystyle{ieeetr}\n\\input{pwOmics-concordance}\n\\maketitle\n\n\\tableofcontents\n\\section{Introduction}\nCharacterization of biological processes can be performed in great detail with\nthe increased generation of omics data on different functional levels of\nthe cell. Especially interpretation of time-series omics data measured in\nparallel with different platforms is a complex but promising task, needing\nconsideration of time-independent combination of omics data and additionally\ntime-dependent signaling analysis. As each measurement technique shows a certain\nbias and has natural limitations in identifying full signaling responses\n(\\cite{yeger-lotem_bridging_2009}), such cross-platform analysis is an up-to-date\napproach in order to connect biological implications on different signaling\nlevels. Using diverse data types is expected to provide a deeper understanding\nof global biological functions and the underlying complex processes\n(Kholodenko et \\cite{kholodenko2012}).\\\\\nThis is why computational data analysis tools for interpretation of data from\nproteomics and transcriptomics measurements in parallel are needed.\\\\\n\\textit{pwOmics} is a tool for pathway-based level-specific data comparison and\nanalysis of single time point or time-series omics data measured in parallel.\nIt provides individual analysis workflows for the different omics data sets\n(see Figure~\\ref{fig:analysis}) and in addition enables consensus analysis of\nomics data.\n\\begin{figure}[htbp]\n\\centering\n\\includegraphics [width=100px, height=300px, angle = 270]{updown.pdf}\n\\caption{\\textit{pwOmics} downstream and upstream analysis.}\n\\label{fig:analysis}\n\\end{figure}\n\nUp to this point analysis is restricted to human species. In future an expansion\nof the package is possible dependent on available online open access database\ninformation.\n\n\n\\section{Databases}\n\\label{sec:Databases}\nAs \\textit{pwOmics} is a package for data integration based on prior pathway\nand transcription knowledge data, it is necessary to define the databases to\nwork with. Three different kinds of databases are necessary to do all analyses\nsteps:\\\\\n\\begin{enumerate}[topsep=0pt,itemsep=-1ex,partopsep=1ex,parsep=1ex]\n\\item Pathway databases:\\\\ The user can choose from Biocarta\n(\\cite{nishimura_biocarta_2001}), Reactome (\\cite{milacic_annotating_2012,\ncroft_reactome_2014}), PID (\\cite{schaefer_pid:_2009}) from the National\nCancer Institute (NCI) and KEGG (\\cite{kanehisa_data_2014,\nkanehisa_kegg:_2000}).\\\\\n\\item Protein-protein interaction (PPI) database:\\\\ STRING\n(\\cite{franceschini_string_2013}).\\\\\n\\item Transcription factor (TF) - target gene databases:\\\\ The user can choose\nfrom ChEA (\\cite{lachmann_chea:_2010}), Pazar (\\cite{portales-casamar_pazar_2009,\nportales-casamar_pazar:_2007}) and/or decide to specify an own file e.g. based\non a commercial database.\\\\\n\\end{enumerate}\n\nThe pathway database information is used to identify the pathways of the\ndifferentially abundant phosphoproteins in the downstream analysis as well as upstream\nprotein regulators of TFs in the upstream analysis. The PPI database STRING\n(\\cite{franceschini_string_2013}) was chosen to define the protein net for the\nconsensus analysis. TF - target gene database information is necessary for\nthe TF identification in pathways in the downstream analysis. Additionally the\nupstream TFs of differentially expressed genes/transcripts are identified in the\nupstream analysis based on this information.\\\\\nIn downstream analysis the pathway gene set information is used, whereas in the\nupstream analysis also the pathway topology information is exploited.\\\\\n\nThe database information is downloaded internally via \\textit{STRINGdb} and\n\\textit{AnnotationHub} (\\cite{Morgan}) package. In case the author is interested\nalso in the metadata of the pathway database and TF - target database it can be\nreceived by\n\n\\begin{Schunk}\n\\begin{Sinput}\n> library(pwOmics)\n> library(AnnotationHub)\n> ah = AnnotationHub()\n> #pathway databases\n> pw = query(ah, \"NIH Pathway Interaction Database\")\n> pw[1]\n\\end{Sinput}\n\\begin{Soutput}\nAnnotationHub with 1 record\n# snapshotDate(): 2016-08-15 \n# names(): AH22329\n# $dataprovider: NIH Pathway Interaction Database\n# $species: Homo sapiens\n# $rdataclass: biopax\n# $title: BioCarta.owl.gz\n# $description: BioCarta BioPax file from NCI Pathway Interaction Database\n# $taxonomyid: 9606\n# $genome: hg19\n# $sourcetype: BioPax\n# $sourceurl: ftp://ftp1.nci.nih.gov/pub/PID/BioPAX/BioCarta.owl.gz\n# $sourcelastmodifieddate: 2009-09-09\n# $sourcesize: 338343\n# $tags: BioCarta, BioPax, Pathway Interaction Database \n# retrieve record with 'object[[\"AH22329\"]]' \n\\end{Soutput}\n\\begin{Sinput}\n> #TF-target databases\n> chea = query(ah, \"ChEA\")\n> chea[1]\n\\end{Sinput}\n\\begin{Soutput}\nAnnotationHub with 1 record\n# snapshotDate(): 2016-08-15 \n# names(): AH22237\n# $dataprovider: ChEA\n# $species: NA\n# $rdataclass: data.frame\n# $title: chea-background.zip\n# $description: ChEA background file, containing transcription factor data t...\n# $taxonomyid: NA\n# $genome: NA\n# $sourcetype: Zip\n# $sourceurl: http://amp.pharm.mssm.edu/result/kea/chea-background.zip\n# $sourcelastmodifieddate: 2015-03-09\n# $sourcesize: 3655103\n# $tags: ChEA, Transcription Factors \n# retrieve record with 'object[[\"AH22237\"]]' \n\\end{Soutput}\n\\begin{Sinput}\n> pazar = query(ah, \"Pazar\")\n> pazar[1]\n\\end{Sinput}\n\\begin{Soutput}\nAnnotationHub with 1 record\n# snapshotDate(): 2016-08-15 \n# names(): AH22238\n# $dataprovider: Pazar\n# $species: NA\n# $rdataclass: GRanges\n# $title: pazar_ABS_20120522.csv\n# $description: TF - Target Gene file from pazar_ABS_20120522\n# $taxonomyid: NA\n# $genome: NA\n# $sourcetype: CSV\n# $sourceurl: http://www.pazar.info/tftargets/pazar_ABS_20120522.csv\n# $sourcelastmodifieddate: 2012-06-04\n# $sourcesize: 120202\n# $tags: Pazar, Transcription Factors \n# retrieve record with 'object[[\"AH22238\"]]' \n\\end{Soutput}\n\\end{Schunk}\n\nIn case you want to use TF - target gene information which is not part of the\nmentioned databases but e.g. part of a commercial database, a\nuser-specified file can be used for the analysis. This file should be a `.txt'\nfile with first column transcription factors and second column target gene\nsymbols without a header, e.g.:\\\\\n\n\\begin{center}\n\\fbox{\\parbox[c]{3cm}{\nGATA-4    HAMP\\\\\nc-Jun\tIL18\\\\\nNF-kappaB   TLR2\\\\\nMYB LTB\\\\\nFOXO1A\tTGFBR1\\\\\n...}}\n\\end{center}\n\nThe STRING PPI-information is downloaded automatically while processing and\nanalyzing the data: The \\textit{STRINGdb} package (\\cite{franceschini_string_2013})\nis used here.\n\n\\section{Example dataset}\nThe example dataset used here for demonstration purposes comprises \nwhole genome time course microarray data at time points\n0, 1, 4, 8, 13, 18 and 24 hr after stimulation.\nThe complementary phosphoproteomics data was measured \nat time points 0.25, 1, 4, 8, 13, 18 and 24 hours after\nstimulation. Preprocessing of data is presupposed with given lists of \nsignificant genes and phosphoproteins for\neach time point as logarithmized expression ratios relative to \nthe time 0 hr controls.\n\n\n\\section{Data pre-processing}\n\\label{sec:Datapre}\n\n\\textit{pwOmics} is a package for secondary data analysis, i.e. it needs already\npre-processed data as input for the analysis. The input required is\\\\\n\\begin{enumerate}[topsep=0pt,itemsep=-1ex,partopsep=1ex,parsep=1ex]\n\\item a list of all phosphoprotein IDs measured,\\\\\n\\item a list of all gene/transcript IDs measured,\\\\\n\\item a list of differentially abundant phosphoproteins + log fold changes,\\\\\n\\item a list of differentially expressed genes/transcripts + log fold changes.\\\\\n\\end{enumerate}\nThe IDs need to be gene symbols, both for phosphoprotein and gene/transcript data.\nIn case time-series data is analyzed inputs 3. and 4. needs to be specified for\neach time point. It is absolutely necessary, that all phosphoproteins and\ngenes/transcript in inputs 3. and 4. are part of the lists of all phosphoprotein IDs\nand all gene/transcript IDs, respectively.\n\\\\\n\nThe OmicsData object is the format used for data analysis in \\textit{pwOmics}\npackage. It contains a list of four main elements:\\\\\n\\begin{enumerate}[topsep=0pt,itemsep=-1ex,partopsep=1ex,parsep=1ex]\n\\item OmicsD - here the omics data set, its description and the results are\nstored\\\\\n\\item PathwayD - here the chosen pathway databases and the generated Biopax\nmodel is stored\\\\\n\\item TFtargetsD - here the chosen TF-target gene databases and the combined\nTF-target gene information is stored\\\\\n\\item Status - The status variable equals `1' in case not all information needed\nfor the analysis is read in yet and `2' after identification of the first\nupstream/downstream signaling levels.\nAs the enrichment step is not necessarily part of the analysis and dependent on\nthe pathway database and the TF-target gene database the identification of\nsignaling molecules in further levels might not be successful, the status\nvariable is not used in the further analysis.\\\\\n\\end{enumerate}\nThus \\textit{pwOmics} reads in the omics data set provided by the user to the\nfirst element of the OmicsData object and further on stores all the results in\nthis part as well.\\\\\n\nThis is why the user has to provide the omics data set in a special format: A\nlist needs to be generated with a phosphoprotein list named `P' as first element and a\ngene/transcript list named `G' as second element. These lists contain as first\nelement a data frame with all (unique) phosphoprotein IDs and gene/transcript IDs in\nthe first column, respectively, and as second element a list with data frames\nfor each time point of measurement. The data frames have two columns with the\nfirst one containing the differentially abundant/expressed phosphoproteins or\ngenes/transcripts as gene symbols and the second column containing the\ncorresponding log fold changes, e.g.:\\\\\n\\begin{Schunk}\n\\begin{Sinput}\n> data(OmicsExampleData)\n> OmicsExampleData\n\\end{Sinput}\n\\end{Schunk}\nGenerated as in the following example:\n\\begin{verbatim}\nOmicsExampleData = list(P = list(allPIDs,\n                   list(PIDstp0.25, PIDstp1, PIDstp4, PIDstp8,\n                        PIDstp13, PIDstp18, PIDstp24)),\n                        G = list(allGIDs,\n                   list(GIDstp1, GIDstp4, GIDstp8, GIDstp13,\n                        GIDstp18, GIDstp24)))\n\\end{verbatim}\n\n\\begin{Schunk}\n\\begin{Sinput}\n> head(OmicsExampleData$P[[2]][[1]])\n\\end{Sinput}\n\\begin{Soutput}\n  GeneSymbol     X15min\n1     MRPS17  0.6976049\n2      RPS12 -1.0297977\n3     SLC3A2 -1.2623327\n4       RPL8  0.8304820\n5       ACTB -2.4914461\n6      ALDOA  0.8637013\n\\end{Soutput}\n\\end{Schunk}\n\n\n\n\nIn case the user only wants to analyze omics data from a single time point just\none data frame has to be specified.\\\\\nThe time points do not have to be the same for phosphoprotein and gene/transcript data\nand need to be specified when reading in the omics data set separately via the\n`tp\\_prots' and `tp\\_genes' parameters of the `readOmics' function.\n\n\\begin{Schunk}\n\\begin{Sinput}\n> data_omics = readOmics(tp_prots = c(0.25, 1, 4, 8, 13, 18, 24),\n+                        tp_genes = c(1, 4, 8, 13, 18, 24),\n+                        OmicsExampleData,\n+                        PWdatabase = c(\"biocarta\", \"kegg\", \"nci\",\n+                                       \"reactome\"),\n+                        TFtargetdatabase = c(\"userspec\"))\n\\end{Sinput}\n\\end{Schunk}\n\nIf data from a single timepoint measurement should be analyzed the user simply\nassigns the experiment number `1' for these parameters:\\\\\n\\begin{verbatim}\n#for single time point data set:\nomics = list(P = list(allPIDs, list(PIDs_1)),\n             G = list(allGIDs, list(GIDs_1)))\ndata_omics = readOmics(tp_prots = c(1),\n                    tp_genes = c(1),\n                    OmicsExampleData,\n                    PWdatabase = c(\"biocarta\", \"kegg\", \"nci\",\n                                      \"reactome\"),\n                    TFtargetdatabase = c(\"userspec\"))\n\\end{verbatim}\nAdditionally the selected databases have to be specified.\\\\\n\nThe stored information can be easily accessed via the following functions:\n\\begin{Schunk}\n\\begin{Sinput}\n> getOmicsTimepoints(data_omics)\n> head(getOmicsallProteinIDs(data_omics))\n> head(getOmicsallGeneIDs(data_omics))\n> head(getOmicsDataset(data_omics, writeData = FALSE)[[1]])\n\\end{Sinput}\n\\end{Schunk}\n\n\n\\section{Individual analysis}\n\nAs shown in Figure~\\ref{fig:analysis} the analysis is based on an individual\nanalysis of the phosphoproteomic and the genomic/transcriptomic data. The downstream\nanalysis and upstream analysis are described in the following subsections.\n\nPrior to that the database information has to be read in. In a first step the\nphosphoprotein information about downstream activating/inactivating effects \nshould be read in.\n\n\\begin{verbatim}\ndata_omics = readPhosphodata(data_omics, phosphoreg)\n\\end{verbatim}\n\nThe parameter `phosphoreg' should be a tab-separated .txt file with two columns, \nbut no header. The first column should include the HUGO gene symbols of the \nphosphoproteins with known downstream effects, the second column should include\neither activating (1) or inactivating (-1) downstream effect coding upon\nphosphorylation of the corresponding phosphoprotein. So far, there is no \npossibility to include multiple phosphorylation events individually.\nHowever, if no information for a phosphoprotein is available in this file, any\nup/downregulation match is allowed for the molecules identified\nin the intersection analyses.\n\nIn a second step the TF- target information can be made accessible to the \n`OmicsData' object by:\n\n\\begin{verbatim}\ndata_omics = readTFdata(data_omics, TF_target_path)\n\\end{verbatim}\n\nVia the `TF\\_target\\_path' parameter a path of a user-specified file specifying\ntranscription factors and corresponding target genes can be given. This should be\na tab-separated .txt file with two columns, but no header, giving HUGO gene\nsymbols of transcription factors in the first column and gene symbols of corresponding\ntarget genes in a second column. This information can be used additionally to \nthe selected database content.\n\n\nThirdly, the `readPWdata' function takes the `OmicsData' object with the\nprovided information about the omics data set and the path of the prepared\n`.RData' genelists from the pathway databases (see Section~\\ref{sec:Databases})\nor automatically generates the corresponding genelists of the pathway data\nif `loadgenelists = FALSE'. In this step the automatic definition of internal\nIDs for different pathway databases is necessary, which are stored\nin a new biopax model in the `OmicsData' object.\n\\begin{verbatim}\ndata_omicsPW = readPWdata(data_omics,\n               loadgenelists = FALSE)\n\\end{verbatim}\nAs the process of generating genelists with these IDs can take some time -\nespecially for rather big databases such as Reactome\n(\\cite{milacic_annotating_2012, croft_reactome_2014}) - the genelists for the\ndifferent databases are automatically stored in the working directory and can\nbe reused in another analysis when the corresponding path containing these files\nis given to the `readPWdata' function as loadgenelists parameter.\n\\begin{verbatim}\ndata_omics = readPWdata(data_omics,\n             loadgenelists = \"Genelist_reactome.RData\")\n\\end{verbatim}\n\n\n\\subsection{Downstream analysis}\nThe downstream analysis is starting with the provided phosphoproteomic data (either\nsingle time point data or time-series data). The first step is the identification\nof downstream regulation influence of phosphoproteins based on the file read in\nby `readPhosphodata' function. \n\\begin{verbatim}\ndata_omics = identifyPR(data_omics)\n\\end{verbatim}\nThe second step is the identification of the pathways in which the \ndifferentially abundant phosphoproteins play a role. \\textit{pwOmics} \nperforms this searching step on the basis of the\nprovided phosphoproteomic data set and the selected pathway database(s). \nAs this function exploits pathway knowledge, it is necessary to be in the working\ndirectory of the genelists that were generate by function `readPWdata'.\n\\begin{verbatim}\ndata_omics = identifyPWs(data_omics)\n\\end{verbatim}\nFollowing the workflow the next step is the identification of the transcription\nfactors in these pathways, which is done with the information\nprovided by the chosen TF-target gene database. \n\\begin{verbatim}\ndata_omics = identifyPWTFTGs(data_omics)\n\\end{verbatim}\nFor use of this function the working directory should still contain the previously\ngenerated genelists.\\\\\n\nThe results of the downstream analysis can be easily accessed by the following\nfunctions:\n\\begin{verbatim}\ngetDS_PWs(data_omics)\ngetDS_TFs(data_omics)\ngetDS_TGs(data_omics)\n\n#Access biopax model generated newly on basis of selected\n#pathway databases:\ngetBiopaxModel(data_omics)\n\\end{verbatim}\n\n\n\n\\subsection{Upstream analysis}\nThe upstream analysis is starting with the provided gene/transcript data (either\nsingle time point data or time-series data). It first of all identifies the\nupstream TFs of the differentially expressed genes/transcripts. This step is\ndone with the provided/selected information of TF-target gene pairs.\n\nGiven this information, the identification of upstream TFs can be done:\n\\begin{verbatim}\ndata_omics = identifyTFs(data_omics)\n\\end{verbatim}\n\nUpstream of the TFs the potential regulator proteins can be identified with the\nfollowing function:\n\\begin{verbatim}\ndata_omics = identifyRsofTFs(data_omics, \n                       noTFs_inPW = 1, order_neighbors = 10)\n\\end{verbatim}\nThe identification of potential upstream regulators is done in the following way:\\\\\n\\begin{enumerate}[topsep=0pt,itemsep=-1ex,partopsep=1ex,parsep=1ex]\n\\item Identification of the pathways the previously identified TFs are part of.\\\\\n\\item Selection of pathways according to the user-specified parameter\n`noTFs\\_inPW': Only those pathways are considered in further analysis with at\nleast this number of TFs present in the pathway.\\\\\n\\item Upstream regulators are identified for these TFs. This is done by finding\nfirst for each TF the pathway neighborhood according to the user-specified\nparameter `order\\_neighbors'. This parameter specifies the order of the\nidentified pathway neighborhood. Then the intersection of all identified\nneighborhoods for all TFs in a pathway is determined. The resulting pathway\nnode set is defined here as the set of potential regulator proteins.\\\\\n\\end{enumerate}\n\nIn case the pathways under consideration do not have pathway components in the\ndownloaded biopax model, this will be indicated with a warning. This warning can\nbe ignored by the user in regard to the following analysis steps.\n\nThe results of the upstream analysis can be accessed with the following functions:\n\\begin{verbatim}\ngetUS_TFs(data_omics)\ngetUS_PWs(data_omics)\ngetUS_regulators(data_omics)\n\\end{verbatim}\n\n\n\\section{Consensus analysis}\n\nThe consensus analysis combines the results from upstream and downstream analysis\nby constituting in particular the comparative analysis of the results of the\ntwo different data sets on each cellular level individually. \nThe intersection analysis thus simply compares the results\nof the separate upstream and downstream analyses. The static consensus analysis\nallows to determine static consensus graphs for each time point measured in\nparallel. Finally, the consensus-based dynamic analysis provides the user with one\nfinal dynamic network obtained from the data changes over time\nbased on dynamic bayesian network inference. The consensus-based dynamic analysis is\nonly conductable with time-series data sets measured for both phosphoproteome\nand genome/transcriptome data in parallel.\n\n\n\\subsection{Intersection analysis}\nThe intersection analysis of \\textit{pwOmics} is a simple comparative analysis\nof the results of upstream and downstream analysis. Thus, it enables a\ncomparison of single time point data and time-series data, the latter also for\nnon-corresponding time points in the different data sets. The comparison is\npossible on the three different functional levels considered in this package:\nOn the pathway level, the transcription factor level and gene/transcript level.\nThe parameters `updown' and `phospho' enable to define, whether the direction\nof regulation should be considered in the comparison and whether the\nphosphosite information should be considered. The consensus\nmolecule sets (C) for each of the molecular levels (protein level,\ntranscription factor level and gene/transcript level) are defined as:\n\\begin{enumerate}[topsep=0pt,itemsep=-1ex,partopsep=1ex,parsep=1ex]\n\\item if phosphoprotein downstream activity is induced:\\\\\n$C = (X'\\uparrow \\cap ~X\t\\uparrow) \\cup (X'\\downarrow \\cap ~X\\downarrow)$ \\\\\n\\item if phosphoprotein downstream activity is inhibited:\\\\\n$C = (X'\\uparrow \\cap ~X\t\\downarrow) \\cup (X'\\downarrow \\cap ~X\\uparrow)$ \\\\\n\\item if no information is available for a specific phosphoprotein:\\\\\n$C = (X'\\uparrow \\cap ~X\t\\uparrow) \\cup (X'\\downarrow \\cap ~X\\downarrow)\n\\cup (X'\\uparrow \\cap ~X\t\\downarrow) \\cup (X'\\downarrow \\cap ~X\\uparrow)$\\\\\n\\end{enumerate}\nwith $\\uparrow$ = upregulated and $\\downarrow$ = downregulated and $X$ =\nmolecules in downstream analysis, $X'$ = molecules in upstream analysis.\n\\begin{verbatim}\ngetProteinIntersection(data_omics, tp_prot = 4, tp_genes = 18,\n                       updown = TRUE, phospho = TRUE)\ngetTFIntersection(data_omics, tp_prot = 13, tp_genes = 13,\n                       updown = TRUE, phospho = TRUE)\ngetGenesIntersection(data_omics, tp_prot = 24, tp_genes = 24,\n                        updown = TRUE, phospho = TRUE)\n\\end{verbatim}\nThese functions not only enable a comparison of the same timepoints on the\ndistinct levels, but for time-series data sets also for non-matching time\npoints:\\\\\nWith the time resolution of measuring omics data in most cases being pre-defined\nby expected signaling changes and financial limitations the potential in the\ninterpretation of the results is strongly confined to the experimental design\ndecisions. Thus, measured signaling changes, which naturally consist of a\nsuperposition of diverse time-scales of transcriptional and translational\nprocesses and comprehend diverse frequency patterns (\\cite{yosef_impulse_2011}),\nare dependent on the sampling. This means for some of the signaling axes it\nmight be the case, that\n\\begin{itemize}\n\\item changes are not detected at all as their rate is too high,\n\\item some are represented in the data and\n\\item some might be so slow that their change is not considered significant and\nthus are excluded from analysis.\n\\end{itemize}\nAs the corresponding signaling changes are not expected to be seen at the same\ntime point in phosphoproteome data and gene/transcript data it is necessary to enable\nalso the comparison of non-corresponding time points.\\\\\nThe option to compare non-corresponding time points cannot account for the\nchanges not captured during measurement, however, it gives the possibility to\nconsider also the time needed for regulatory control mechanisms in the\ninterpretation of the measurement results.\\\\\nIn case the user wants to compare the corresponding time points on the three\nlevels simultaneously he can do so by using the following function:\n\\begin{verbatim}\ngettpIntersection(data_omics, updown = TRUE, phospho = TRUE)\n\\end{verbatim}\nThe parameters `updown' and `phospho' allow to select whether different regulation\ndirections in the data sets (phosphoproteome vs. transcriptome) should be filtered out\nin the comparison, and whether the downstream regulation influence of\nphosphoproteins read in with the `readPhosphodata' function should be considered\nin the comparison.\n\n\n\n\\subsection{Static consensus analysis}\n\nThe static consensus analysis goes one step ahead and integrates the results\ngained from the comparative analysis of the corresponding time points to a\nconsensus net for each time point. The change of this consensus net over time\ngives a first insight into the changes seen statically at the different time\npoints. However, the static consensus nets do not yet include information\ngathered over time - as it is the case for the consensus-based dynamic analysis\n(see Section~\\ref{sec:DynCons}). This is why the static consensus analysis\nis also applicable for single time point measurements.\\\\\n\nThe static consensus analysis is conducted by generation of a Steiner tree\n(\\cite{Kleinberg_AlgorithmDesign_2006}) on basis of consensus proteins and TFs\nidentified in downstream and upstream analysis for each corresponding time\npoint. The underlying graph used is the protein-protein-interaction (PPI)\ngraph from the STRING database reduced to the connected nodes.\nThe consensus proteins and TFs are considered as terminal nodes and are\nconnected via a shortest path-based approximation of the Steiner tree\nalgorithm (\\cite{Takahashi_Steiner_1980, Sadeghi2013}) across the reduced\nPPI-STRING-graph. Subsequently knowledge of TF-target gene pairs from the\nchosen database is used to expand the graph with matching genes/transcripts\nfrom both upstream and downstream analysis. In case the consensus graph contains\ncorresponding proteins and genes/transcripts, feedback loops are added automatically.\n\\begin{verbatim}\nconsensusGraphs = staticConsensusNet(data_omics, updown = TRUE,\n                                     phospho = TRUE)\n\\end{verbatim}\nThe parameters `updown' and `phospho' give the same filtering options as in\nthe intersection analysis.\n\n\n\\subsection{Consensus-based dynamic analysis}\n\\label{sec:DynCons}\n\nUnlike the static consensus analysis, the consensus-based dynamic analysis takes into\nconsideration also the signaling changes over time by applying dynamic bayesian\nnetwork inference. The packages used for the consensus-based dynamic analysis are\n\\textit{longitudinal} (\\cite{Opgen_longi_2006, rainer_opgen-rhein_inferring_2006})\nto adjust the format of the data and the actual network inference part is done\nvia the \\textit{ebdbNet} (\\cite{Rau_ebdbnet_2010}) package.\nThis package includes an iterative empirical Bayesian procedure with a Kalman\nfilter estimating the posterior distributions of the network parameters.\nThe defined prior structure of the network is used for a straightforward\nestimation of hyperparameters via an expectation maximization (EM)-like\nalgorithm and the dimension of the hidden states are determined via the\nsingular value decomposition (SVD) of a block-Hankel matrix.\\\\\n\nThe nodes included into the network inference step are nodes which are part of\nthe static consensus graphs from corresponding time points of the two different\nmeasurement types, i.e.\\\\\n\\begin{enumerate}[topsep=0pt,itemsep=-1ex,partopsep=1ex,parsep=1ex]\n\\item proteins identified in upstream and downstream analysis at the same\ntime points,\\\\\n\\item Steiner nodes identified via static consensus analysis,\\\\\n\\item TFs identified in upstream and downstream analysis at the same time\npoints and\\\\\n\\item genes/transcripts identified in upstream and downstream analysis at the\nsame time points.\\\\\n\\end{enumerate}\nHowever, all measured time points of these nodes are taken into consideration.\n\nTo apply dynamic network inference a reasonable number of measurements needs\nto be available. As in most cases of parallel phosphoprotein and gene/transcript\nmeasurements only very few corresponding time steps are available it is\nnecessary to artificially introduce additional time steps. This is done by\ngenerating smoothing splines applied on the log fold changes provided by the\nuser under the simplifying assumption of a gradual change of signaling between\nthe different time points.\\\\\n\nThis assumption, however, has to be applied consciously and carefully, as there\nmight be higher frequency signaling components superimposed (see for a\ncomprehensive analysis of temporal dynamics of gene expression\n(\\cite{yosef_impulse_2011})).\nIn theory a signal has to be sampled two times its maximal frequency in order to\nbe able to reconstruct it exactly from time discrete measurements\n(Nyquist-Shannon sampling theorem (\\cite{Shannon_theorem_1949,\nNyquist_theorem_1928})). This means only exact interpretation of those signaling\naxes are possible that have a frequency which is smaller than half of the\nsampling frequency. However, under certain preconditions on signal structure\nand the sampling operator reconstruction of the original signal can be done with\na lower sampling rate (\\cite{DBLP:journals/tit/BlumensathD09}).\nThis is an interesting starting point for a more comprehensive dynamic analysis\nof the expected signals and the sampling needed for an extensive data mining of\nomics data sets measured in parallel, but exceeds the scope of this package.\n\\\\\n\nThe number of time points generated additionally via smoothing splines is based\non simulation results of \\textit{ebdbNet} analysis for median area under the\ncurve (AUC) values of receiver operating characteristic (ROC) curves: In their\nresults it was shown that a plateau at around 50 to 75 time points was reached.\nThus in \\textit{pwOmics} 50 time points are predicted with smoothing splines in\norder to apply dynamic bayesian network inference on omics data sets measured\nin parallel.\\\\\n\nAfter generation of these time points a block-Hankel matrix of autocovariances\nis constructed based on the time series abundance/expression data. For this the\nuser needs to provide the \\textit{laghankel} parameter, specifying the maximum\nrelevant time lag to be used in constructing the block-Hankel matrix.\nWith a singular value decomposition (see function `hankel' of \\textit{ebdbNet}\npackage) the number of hidden states can be determined. Here, the user can\nspecify the \\textit{cutoffhankel} parameter to choose the cutoff to determine\nthe desired percent of total variance explained by the singular values.\nAdditional parameters on convergence criteria and iterations performed can be\nspecified. For further details the user is referred to (\\cite{Rau_ebdbnet_2010}).\n\\begin{verbatim}\nlibrary(ebdbNet)\nlibrary(longitudinal)\ndynInferredNet = consDynamicNet(data_omics, consensusGraphs, \n                 laghankel = 3, cutoffhankel = 0.9)\n\\end{verbatim}\n\n\\section{Time profile clustering}\nAn additional analysis option is clustering of co-regulation patterns over time.\nIt provides information about the signaling molecules with common dynamic\nbehaviour and thus allows to draw conclusions in terms of signaling chronology.\nTime profile clustering is performed as soft clustering based on the\n\\textit{Mfuzz} package (\\cite{Mfuzz2012}). The advantage of this clustering method\nis that a protein, TF or gene/transcript can be assigned to several clusters,\nthus reducing the sensitivity to noise and the information loss hard clustering\nexhibits. It is implemented as fuzzy c-means algorithm (\\cite{Hathaway_Pattern1986})\nand iteratively optimizes the objective function to minimize the variation of\nobjects within the clusters. The user needs to provide a `min.std' threshold\nparameter if proteins or genes/transcripts with a low standard deviation\nshould be excluded. In addition the maximum number of cluster centers which\nshould be tested in the `minimum distance between cluster centroid test' has\nto by given. This number is used as initial number to determine the data-specific\nmaximal cluster number based on the number of distinct data points. For more\ndetails see (\\cite{Mfuzz2012}) and (\\cite{schwammle_simple_2010}).\n\\begin{verbatim}\nlibrary(Mfuzz)\nfuzzyClusters = clusterTimeProfiles(dynInferredNet,\n                                    min.std = 0,\n                                    ncenters = 12)\nfuzzyClusters$size\nfuzzyClusters$cluster\n\\end{verbatim}\n\n\\section{Identification of signaling axes}\nBased on the provided data it is also possible to follow the signal through the\ndifferent cellular levels individually, such that individual signaling axes can\nbe identified.\n\nThe user can seach for individual axes downstream of a certain phosphoprotein by\nusing the `findSignalingAxes' function and indicating the time point of interest.\nThe time point needs to comply with the ones read in in the `readOmics' function.\n\\begin{verbatim}\nMAPK1_axis1 = findSignalingAxes(data_omics, \n                                phosphoprot = \"MAPK1\", tpDS = 1)\nMAPK1_axis18 = findSignalingAxes(data_omics, \n                                phosphoprot = \"MAPK1\", tpDS = 18)\nBLNK_axis13 = findSignalingAxes(data_omics, \n                                phosphoprot = \"BLNK\", tpDS = 13)\n\\end{verbatim}\nThe output is a list of pathways that are identified for this time point \ndownstream of the phosphoprotein of interest. Sublists give information on\nthe transcription factors in these pathways, the direction of regulation \n(up/down), the target genes and their matching transcripts from the transcriptome\ndata set.\n\nBased on these results the user can produce a summarized results table containing\nthose target genes of the axis, which are matching the transcriptome data, the\ndirection of their regulation coming from the phosphoproteome data set (up/down),\nthe direction of regulation coming from the transcriptome data set (up/down) and\nthe summarized complying information:\n\\begin{verbatim}\nMAPK1_transcripts = get_matching_transcripts(data_omics, \n                                             MAPK1_axis1)\n\\end{verbatim}\n\nIf the user is interested in an overall analysis of all signaling axes in the\ndata sets, he can apply:\n\\begin{verbatim}\ngenerate_DSSignalingBase(data_omics, \n                         timepoints = c(0.25, 1, 4, 8, 13, 18, 24))\n\\end{verbatim}\nwith chosen time points.\nThis function creates a folder structure for each consensus protein \nin the working directory, which is filled with .RData objects and .csv tables \nthat carry the information for the individual time points of interest.\n\n\n\\section{Visualization}\nTo complement the results from the different comparisons and analyses\n(accessible via the `get...' functions) the \\textit{pwOmics} package provides\nvisualization functions for the different analyses.\nThe consensus graphs of the static analysis for one or more corresponding time\npoints can be plotted with the following function\n(see Figure~\\ref{fig:Consgraph1} and Figure~\\ref{fig:Consgraph2}):\n\\begin{verbatim}\nplotConsensusGraph(consensusGraphs, data_omics)\n\\end{verbatim}\n\n\\begin{figure}[htbp]\n\\centering\n\\includegraphics [trim={3cm 2cm 0cm 2cm},clip]{ConsensusGraphs_tp1.pdf}\n\\caption{\\textit{pwOmics} static consensus graph: Time point 1 hr.}\n\\label{fig:Consgraph1}\n\\end{figure}\n\n\n\\begin{figure}[htbp]\n\\centering\n\\includegraphics [trim={3cm 2cm 0cm 2cm},clip]{ConsensusGraphs_tp24.pdf}\n\\caption{\\textit{pwOmics} static consensus graph: Time point 24 hrs.}\n\\label{fig:Consgraph2}\n\\end{figure}\n\n\nThe consensus-based dynamic analysis result can be visualized as follows\n(see Figure~\\ref{fig:DynConsgraph}):\n\\begin{verbatim}\nplotConsDynNet(dynInferredNet, sig.level = 0.7)\n\\end{verbatim}\nHere, the parameter `sig.level' is the significance level used as cutoff for\nplotting edges in the network and has to be specified in the range between\n0 and 1. Furthermore the user can indicate if unconnected nodes should be\nremoved and provide additional \\textit{igraph} (\\cite{igraph2006})\nlayout parameters.\\\\\n\\begin{figure}[htbp]\n\\centering\n\\includegraphics{dynConsensusNet_2.pdf}\n\\caption{\\textit{pwOmics} dynamic network graph.}\n\\label{fig:DynConsgraph}\n\\end{figure}\n\nHowever, as the user can access the networks easily the \\textit{tkplot} function \nfrom the \\textit{igraph} R package is a nice interactive graph drawing alternative.\nIn addition plot parameters can be easily changed as the result networks\nare of class `igraph'.\n\nIn order to plot the results from time profile clustering\n(see Figure~\\ref{fig:cluster}) the following function can be used:\n\\begin{verbatim}\nplotTimeProfileClusters(fuzzyClusters) \n\\end{verbatim}\nThe different colours represent the different clusters. The legend is only shown\nif the number of genes and proteins is not too large. Otherwise the user can\neasily access this information by having a look to the output of the\n`clusterTimeProfiles' function which provides information about cluster centers,\nthe number of data points in each cluster of the closest hard clustering,\ncluster indices, and additional parameters explained in detail in the `mfuzz'\ndocumentation. In the legend the attachments `\\_g' and `\\_p', respectively,\nindicate, if the node originally derives from phosphoprotein or gene/transcript\nmeasurements.\n\n\\begin{figure}[htbp]\n\\centering\n\\includegraphics{TimeProfiles.pdf}\n\\caption{\\textit{pwOmics} time profile clusters.}\n\\label{fig:cluster}\n\\end{figure}\n\nIt is furthermore possible to investigate temporal correlations of phosphoprotein\nand transcriptome measurements.\n\\begin{verbatim}\ntemp_correlations(consensusGraphs[[1]], \n    timepointsprot = c(1,4,8,13,18,24), \n    timepointstrans = c(1,4,8,13,18,24),\n    foldername = \"~/TempCorr_\", \n    trans_sign = \"~/transcriptome_signif.txt\", \n    trans_sign_names = c(\"FC_1\", \"FC_4\", \"FC_8\", \"FC_13\", \n                         \"FC_18\", \"FC_24\"), \n    phospho_sign = \"~/phospho_anno.txt\", \n    phospho_sign_names = c(\"rat_1\", \"rat_4\",\"rat_8\",\"rat_13\", \n                           \"rat_18\", \"rat_24\")) \n\\end{verbatim}\n\nThis function needs as input the static consensus graph with the consensus \nproteins of interest, the protein and transcriptome measurement time points for which\ncorrelation should be investigated, the name of the folder that should be\ngenerated as results folder, the phosphoproteome and transcriptome measurement\nfiles and the corresponding column names for the selected time points.\nIt is necessary that the gene symbols read in in the `readOmics' function are\nreused here.\nIn the tab-delimited phosphoproteome measurement file (.txt) \nadditional phosphoprotein information can be stored in columns \n`Amino.acid', `Position' and `Multiplicity'. This allows to compare correlations\nfor individual phosphorylations.\n\n\\begin{figure}[htbp]\n\\centering\n\\includegraphics [width = 350pt, height = 280pt, trim={0cm 5cm 0cm 0cm},clip]{TempCorr_MAPK14_downstream.pdf}\n\\caption{Temporal correlation of MAPK14 with transcripts identified to be\nresulted downstream.}\n\\end{figure}\n\n\n\n\n\n\n\\newpage\n\\section{Session Information}\n\\begin{itemize}[topsep=0pt,itemsep=-1ex,partopsep=1ex,parsep=1ex]\n\\item R Under development (unstable) (2015-03-11 r67980),\nPlatform: x86\\_64-unknown-linux-gnu (64-bit),\nRunning under: Ubuntu precise (12.04.5 LTS)\\\\\n\\item Locale: LC\\_CTYPE=en\\_US.UTF-8, LC\\_NUMERIC=C,\\\\\nLC\\_TIME=en\\_US.UTF-8, LC\\_COLLATE=en\\_US.UTF-8,\\\\\nLC\\_MONETARY=en\\_US.UTF-8, LC\\_MESSAGES=en\\_US.UTF-8,\\\\\nLC\\_PAPER=en\\_US.UTF-8, LC\\_NAME=C, LC\\_ADDRESS=C,\\\\\nLC\\_TELEPHONE=C, LC\\_MEASUREMENT=en\\_US.UTF-8,\\\\\nLC\\_IDENTIFICATION=C\\\\\n\\item Attached base packages: tcltk, parallel, stats, graphics, grDevices,\nutils, datasets, methods, base\\\\\n\\item Other attached packages: ebdbNet\\_1.2.3, Mfuzz\\_2.27.1, DynDoc\\_1.45.0,\nwidgetTools\\_1.45.0, e1071\\_1.6-4, Biobase\\_2.27.3, BiocGenerics\\_0.13.11,\nlongitudinal\\_1.1.11, corpcor\\_1.6.7, igraph\\_0.7.1, pwOmics\\_0.99.2\\\\\n\\item Loaded via namespace (and not attached): Rcpp\\_0.11.5, XVector\\_0.7.4,\nBiocInstaller\\_1.17.7, GenomeInfoDb\\_1.3.19, plyr\\_1.8.1,\\\\\nAnnotationHub\\_1.99.82, tkWidgets\\_1.45.0, class\\_7.3-12, bitops\\_1.0-6,\\\\\nbiomaRt\\_2.23.5, digest\\_0.6.8, RSQLite\\_1.0.0, shiny\\_0.11.1, DBI\\_0.3.1,\\\\\nrBiopaxParser\\_2.5.0, stringr\\_0.6.2, httr\\_0.6.1, S4Vectors\\_0.5.23,\\\\\ngtools\\_3.4.2, caTools\\_1.17.1, IRanges\\_2.1.44, stats4\\_3.2.0,\\\\\ndata.table\\_1.9.4, R6\\_2.0.1, AnnotationDbi\\_1.29.24, XML\\_3.98-1.1,\\\\\nRJSONIO\\_1.3-0, gdata\\_2.13.3, reshape2\\_1.4.1, STRINGdb\\_1.7.0,\\\\\ngplots\\_2.16.0, htmltools\\_0.2.6, GenomicRanges\\_1.19.54, mime\\_0.3,\\\\\ninteractiveDisplayBase\\_1.5.6, xtable\\_1.7-4, httpuv\\_1.3.2,\\\\\nKernSmooth\\_2.23-14, RCurl\\_1.95-4.5, chron\\_2.3-45\\\\\n\\end{itemize}\n\n\\printbibliography\n\n\\end{document}\n\n\n",
    "created" : 1503994337450.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "302355508",
    "id" : "6395ABC2",
    "lastKnownWriteTime" : 1503998956,
    "last_content_update" : 1503998956874,
    "path" : "~/pwOmics/vignettes/pwOmics.Rnw",
    "project_path" : "vignettes/pwOmics.Rnw",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "sweave"
}