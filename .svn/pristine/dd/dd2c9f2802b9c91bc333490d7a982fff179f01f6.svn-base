% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pwOmics_consensus_analysis.R
\name{staticConsensusNet}
\alias{staticConsensusNet}
\title{Static analysis.}
\usage{
staticConsensusNet(data_omics, run_times = 3, updown = FALSE,
  tp_prot = NULL, tp_gene = NULL, phospho = TRUE)
}
\arguments{
\item{data_omics}{OmicsData object.}

\item{run_times}{integer specifying number of times to run SP Steiner tree 
algorithm to find minimal graph, default is 3.}

\item{updown}{boolean value; TRUE in case up- and downregulation should be
checked individually for intersection. Type of checking is defined with
parameter 'phospho'.}

\item{tp_prot}{integer specifying the time point that should be included 
into the static consensus net for the phosphoprotein data}

\item{tp_gene}{integer specifying the time point that should be included 
into the static consensus net for the transcriptome data}

\item{phospho}{boolean value; TRUE in case up- and downregulation should be
checked based on provided downstream phosphoprotein influence from 
identifyPR function; FALSE in case up- and downregulation should be checked
for without phosphoprotein database knowledge. Default is TRUE.}
}
\value{
list of igraph objects; length corresponds to number of overlapping 
time points from upstream and downstream analysis.
}
\description{
Identify for each corresponding timepoint of the two datasets the consensus
network. Protein intersection of the omics data and TF intersection are 
linked via SteinerTree algorithm applied on STRING protein-protein
interaction database. 
The Steiner tree algorithm refers to the shortest path heuristic algorithm
of [1,2].
Target genes of this consensus network are identified via the chosen
TF-target gene database(s). Please note that the consensus graphs can be
different as in the Steiner Tree algorithm the start terminal node is 
picked arbitrarily and there are always several shortest path distances. 
By default the same time points of both data sets are considered.
}
\examples{
data(OmicsExampleData)
data_omics = readOmics(tp_prots = c(0.25, 1, 4, 8, 13, 18, 24), 
tp_genes = c(1, 4, 8, 13, 18, 24), OmicsExampleData,
PWdatabase = c("biocarta", "kegg", "nci", "reactome"), 
TFtargetdatabase = c("userspec"))
data_omics = readPhosphodata(data_omics, 
phosphoreg = system.file("extdata", "phospho_reg_table.txt", 
package = "pwOmics")) 
\dontrun{
data_omics = readTFdata(data_omics, 
TF_target_path = system.file("extdata", "TF_targets.txt", 
package = "pwOmics"))
data_omics_plus = readPWdata(data_omics,  
loadgenelists = system.file("extdata/Genelists", package = "pwOmics")) 
data_omics_plus = identifyPR(data_omics_plus)    
setwd(system.file("extdata/Genelists", package = "pwOmics"))
data_omics = identifyPWs(data_omics_plus)
data_omics = identifyTFs(data_omics)
data_omics = identifyRsofTFs(data_omics, 
noTFs_inPW = 1, order_neighbors = 10)
data_omics = identifyPWTFTGs(data_omics)
statConsNet = staticConsensusNet(data_omics)
}
}
\references{
1. Path heuristic and Original path heuristic, Section 4.1.3 of 
the book "The Steiner tree Problem", Peter L. Hammer

2. "An approximate solution for the Steiner problem in graphs", 
H Takahashi, A Matsuyama
}
\keyword{manip}

